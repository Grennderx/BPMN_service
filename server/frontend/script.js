let mediaRecorder;
let audioChunks = [];
const recordButton = document.getElementById('recordButton');
const statusDiv = document.getElementById('status');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
navigator.mediaDevices.getUserMedia({ audio: true })
    .then(stream => {
        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = event => {
            audioChunks.push(event.data);
        };

        mediaRecorder.onstop = async () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
            await sendAudioToServer(audioBlob);
            audioChunks = [];
        };
    })
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', err);
    });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏
recordButton.addEventListener('click', () => {
    if (mediaRecorder.state === 'inactive') {
        mediaRecorder.start();
        recordButton.textContent = '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
        statusDiv.textContent = '–°—Ç–∞—Ç—É—Å: –ó–∞–ø–∏—Å—å...';
    } else {
        mediaRecorder.stop();
        recordButton.textContent = 'üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å';
        statusDiv.textContent = '–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–æ—Ç–∫–∞...';
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function sendAudioToServer(audioBlob) {
    const formData = new FormData();
    formData.append('audio', audioBlob, 'recording.wav');

    try {
        const response = await fetch('http://localhost:5000/transcribe', {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (result.success) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const resultsContainer = document.getElementById('resultsContainer');
            const resultCard = document.createElement('div');
            resultCard.className = 'result-card';
            resultCard.innerHTML = `
                <p style="margin: 0; color: #333; font-size: 16px;">
                    ${result.text}
                </p>
                <small style="color: #666; display: block; margin-top: 8px;">
                    ${new Date().toLocaleTimeString()}
                </small>
            `;
            resultsContainer.prepend(resultCard);

            statusDiv.textContent = '–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞';
        } else {
            statusDiv.textContent = '–û—à–∏–±–∫–∞: ' + result.error;
            statusDiv.parentElement.style.background = '#fee';
            statusDiv.parentElement.style.borderLeft = '4px solid var(--error)';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        statusDiv.textContent = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
recordButton.addEventListener('click', function() {
    this.classList.toggle('recording');
});